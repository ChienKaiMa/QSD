# Generated by Grok 3

import numpy as np

def generate_sic_states_d2(fiducial_state):
    d = 2
    omega = np.exp(2j * np.pi / d)  # -1 for d=2
    tau = np.exp(1j * np.pi / d)    # -1 for d=2
    X = np.array([[0, 1], [1, 0]])
    Z = np.array([[1, 0], [0, -1]])
    
    # Define the 4 displacement operators for tetrahedral SIC
    D_00 = np.eye(2)                           # I
    D_01 = Z                                   # Z
    D_10 = X                                   # X
    D_11 = tau * X @ Z                         # -XZ
    
    # Generate the 4 states
    sic_states = [
        D_00 @ fiducial_state,  # |0>
        D_01 @ fiducial_state,  # Matches tetrahedral
        D_10 @ fiducial_state,  # Matches tetrahedral
        D_11 @ fiducial_state   # Matches tetrahedral
    ]
    
    return np.array(sic_states)

def generate_sic_states(fiducial_state, d):
    omega = np.exp(2j * np.pi / d)
    tau = np.exp(1j * np.pi / d)
    X = np.zeros((d, d), dtype=complex)
    Z = np.zeros((d, d), dtype=complex)
    for j in range(d):
        X[j, (j + 1) % d] = 1
        Z[j, j] = omega ** j
    sic_states = []
    for p in range(d):
        for q in range(d):
            D_pq = tau ** (p * q) * np.linalg.matrix_power(X, p) @ np.linalg.matrix_power(Z, q)
            sic_states.append(D_pq @ fiducial_state)
    return np.array(sic_states)

if __name__=="__main__":
    # d=3 fiducial state (Hesse SIC)
    fiducial_d3 = np.array([(1 + np.sqrt(3)) / np.sqrt(2 * (1 + np.sqrt(3))),
                            -np.sqrt(2) / np.sqrt(2 * (1 + np.sqrt(3))),
                            -np.sqrt(2) / np.sqrt(2 * (1 + np.sqrt(3)))])
    sic_states_d3 = generate_sic_states(fiducial_d3, 3)  # 9 states

    # Select d=3 states (e.g., first 3: (p,q) = (0,0), (0,1), (0,2))
    subset = sic_states_d3[:3]  # Shape: (3, 3)

    # Check linear independence via rank
    matrix = subset.T  # Shape: (3, 3) - columns are the states
    rank = np.linalg.matrix_rank(matrix)
    print(f"Number of states selected: {subset.shape[0]}")
    print(f"Rank of subset: {rank}")
    print("Linearly independent?" , rank == 3)  # True if rank = d

    # Optional: Print the subset
    print("Selected states:")
    print(subset)